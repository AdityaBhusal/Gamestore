@page "/editgame"
@page "/editgame/{id:int}"
@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient

<PageTitle>Add Game</PageTitle>
<!--
InputText is a Blazor component that creates a text input.
@bind-Value is a directive that binds the input's value to a property.
In this case, it binds the input's value to game.Name.
When the input's value changes, game.Name is updated.
This allows you to edit the game's name. 
-->
<!-- 
    FormName is a new attribute that allows you to name the form. 
    EditForm is a Blazor component that wraps form elements.
    model is a parameter that accepts the object to be edited.
    In this case, it's game, an instance of GameDetails.
    The form will be populated with game's properties.
    The form will also update game's properties when edited.
    -->
<h3>Add Games</h3>

@if(genres is null || game is null){
    <p>Loading.....</p>
}
else{
    <EditForm model="@game" FormName="editGame" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-md-4">
            
            <div class="form-group">
                <label for="Name" class="form-label">Name:</label>
                <InputText id="Name" class="form-control" @bind-Value="game.Name" />
                <ValidationMessage For="()=>game.Name" />
            </div>
            
            <div class="form-group">
                <label for="genre" class="form-label">Genre:</label>
                <InputSelect id="genre" class="form-control" @bind-Value="game.GenreId" >
                    <option value="">Select an option</option>
                
                    @foreach(var genre in genres){
                        <option value="@genre.Id">@genre.Name</option>
                    }
    
                </InputSelect>
                <ValidationMessage For="()=>game.GenreId" />
            </div>
            <div class="form-group">
                <label for="releaseDate" class="form-label">Release Date:</label>
                <InputDate id="releaseDate" class="form-control" @bind-Value="game.ReleaseDate" />
            </div>
            <div class ="form-group">
                <label for ="price" class="form-label">Price: </label>
                <InputNumber id="price" class="form-control" @bind-Value="game.Price" />
                <ValidationMessage For="()=>game.Price" />
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary mt-3">Save</button>
    <a type="cancel" class="btn btn-secondary mt-3" href="/">Cancel</a>
    </EditForm>
}
@code {
    [Parameter]
    public int Id{get; set;}
 /* */
    [SupplyParameterFromForm]

    //supply parameter from form is an attribute that allows you to bind a parameter to a form.
    //It binds the parameter to the form with the specified name.
    //In this case, it binds the parameter to the form with the name editGame.
    //When the form is submitted, the parameter is updated with the form's values

 private GameDetails? game{get; set;}

 private GamesClient gamesClient=new();
 private Genre[]? genres;
protected override void OnParametersSet(){
    if(Id is  not null){
        game=GamesClient.GetGame(Id.Value);

    }
    else{
        game=new (){
            Name=String.Empty,
            ReleaseDate=DateOnly.FromDateTime(DateTime.Now)
        };
    
    }
}
 protected override void OnInitialized(){
    genres=GenresClient.getGenres();
 }
    private void HandleSubmit(){
        /*
        HandleSubmit is a method that is called when the form is submitted.
        */
        ArgumentNullException.ThrowIfNull(game);
        GamesClient.AddGame(game);
        NavigationManager.NavigateTo("/");
        }
}
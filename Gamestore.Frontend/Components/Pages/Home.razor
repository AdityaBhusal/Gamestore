@page "/"
@inject GamesClient Client

<!-- we can also import @using Models or @using Gamestore.Frontend.Models -->

<PageTitle>Game Catalog</PageTitle>

<!-- 
    If games is null, a loading message is displayed.
    This message informs users that data is being retrieved.
    It's a common practice to display a loading message when data is being fetched.
    This informs users that the application is working.
    It also prevents users from assuming the application is unresponsive.
    -->
<div class="mt-2">
    <a href="/editgame" class="btn btn-primary" role="button">Add Game</a>
</div>
@if(games == null){
    <p>Loading...</p>
}

else
{
    /*
    else block is executed when games is not null.
    This means games has been populated with data.
    In this block, a table is rendered to display game information.
    The table has columns for game ID, name, genre, release date, and price.
    Each row represents a game.
    For each game in games, a row is created with its properties.
    The table is populated with game data.
    */
 <table class="table table-striped table-hover table-bordered mt-3">
    <thead class="table-dark">
        <tr>
            <th>Id</th>
            <th>Game Name</th>
            <th>Genre</th>
            <th>Release Date</th>
            <th class="text-end">Price</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        
        @foreach (var game in games)
        {
            <tr> 
                <td>@game.Id</td>
                <td>@game.Name</td>
                <td>@game.Genre</td>
                <td>@game.ReleaseDate.ToShortDateString()</td>
                <td class="text-end">@game.Price.ToString("C2")</td>
               <td>
                <div>
                    <a class="btn btn-secondary me-2" role="buttton" href="@GameUrl(game.Id)">
                        <i class="bi bi-pencil" ></i>
                    </a>
                </div>
               </td>
            </tr>
        }
    </tbody>
    </table>
}

@code {
    private GameSummary[]? games;
/*
    client is an instance of GamesClient.
    GamesClient is a class that communicates with the server.
    It's used to retrieve game data.
    new() creates a new instance of GamesClient.
    if new() is not used, client will be null.
    client is used to retrieve game data.
    It's initialized with a new instance of GamesClient.
    This ensures client is not null and can be used to retrieve data.

    games is an array of GameSummary.
    GameSummary is a model class that represents a game.
    It has properties like Id, Name, Genre, ReleaseDate, and Price.
    games stores a collection of games.
    It's initialized as null.
    This indicates games has not been populated with data.

    What is a nullable type?
         - A nullable type is a type that can hold a value or null.
        - Nullable types are declared by appending ? to the type.
        - For example, int? is a nullable integer.
        - Nullable types are useful when a value may be missing.
        - They allow you to represent missing values in a type-safe manner.
        - In your code, games is a nullable array of GameSummary.
        - It can hold a collection of games or null.
        - This allows you to represent the absence of games.
*/

   protected override void  OnInitialized()
   {
        games=Client.GetGames();
    /*
    OnInitialized is a lifecycle method in Blazor.
    It's called when a component is being initialized.
    It's used for initialization tasks like data retrieval or setting initial property values.
    In your code, OnInitialized is overridden in the Home component.
    Inside this method, games property is assigned the value returned by client.GetGames().
    GetGames likely retrieves a collection of games.
    games property stores this collection.
    Calling client.GetGames() inside OnInitialized populates games with necessary data.
    This ensures games is initialized with appropriate data before rendering.
    OnInitialized is one of several lifecycle methods in Blazor, each serving a specific purpose.
    */
   }

   //a function to define the anchor tag href for editing the games
   private static string GameUrl(int id)=>$"/editgame/{id}";
 
}


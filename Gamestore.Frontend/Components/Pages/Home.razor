@page "/"
<!-- we can also import @using Models or @using Gamestore.Frontend.Models -->
@using Models
@using Clients
<PageTitle>Game Catalog</PageTitle>


@if(games is null){
    <p>Loading...</p>
}

else
{
 <table class="table table-striped table-hover table-bordered mt-3">
    <thead class="table-dark">
        <tr>
            <th>Id</th>
            <th>Game Name</th>
            <th>Genre</th>
            <th>Release Date</th>
            <th class="text-end">Price</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        
        @foreach (var game in games)
        {
            <tr> 
                <td>@game.Id</td>
                <td>@game.Name</td>
                <td>@game.Genre</td>
                <td>@game.ReleaseDate.ToShortDateString()</td>
                <td class="text-end">@game.Price.ToString("C2")</td>
               <td> </td>
            </tr>
        }
    </tbody>
</table>
}

@code {
    private GamesClient client = new();
    private GameSummary[]? games;

   protected override void OnInitialized()
   {
        games=client.GetGames();
    /*
    OnInitialized is a lifecycle method in Blazor.
    It's called when a component is being initialized.
    It's used for initialization tasks like data retrieval or setting initial property values.
    In your code, OnInitialized is overridden in the Home component.
    Inside this method, games property is assigned the value returned by client.GetGames().
    GetGames likely retrieves a collection of games.
    games property stores this collection.
    Calling client.GetGames() inside OnInitialized populates games with necessary data.
    This ensures games is initialized with appropriate data before rendering.
    OnInitialized is one of several lifecycle methods in Blazor, each serving a specific purpose.
    */
   }
 
}

